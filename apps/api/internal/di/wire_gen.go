// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/google/wire"
	"github.com/labstack/echo/v4"
	"gogym-api/internal/adapter/auth"
	"gogym-api/internal/adapter/handler"
	"gogym-api/internal/adapter/repository"
	"gogym-api/internal/adapter/router"
	"gogym-api/internal/configs"
	"gogym-api/internal/infra/db"
	"gogym-api/internal/usecase/gym"
	"gogym-api/internal/usecase/review"
	"gogym-api/internal/usecase/session"
	"gogym-api/internal/usecase/user"
)

// Injectors from wire.go:

func BuildServer(cfg *configs.Config) (*echo.Echo, func(), error) {
	httpConfig := provideHTTP(cfg)
	databaseConfig := provideDB(cfg)
	gormDB, err := db.NewDB(databaseConfig)
	if err != nil {
		return nil, nil, err
	}
	gymRepository := repository.NewGymRepository(gormDB)
	tagRepository := repository.NewTagRepository(gormDB)
	gymUseCase := gym.NewInteractor(gymRepository, tagRepository)
	gymHandler := handler.NewGymHandler(gymUseCase)
	userRepository := repository.NewUserRepository(gormDB)
	bcryptPasswordHasher := auth.NewBcryptPasswordHasher()
	userUseCase := user.NewInteractor(userRepository, bcryptPasswordHasher)
	userHandler := handler.NewUserHandler(userUseCase)
	reviewRepository := repository.NewReviewRepository(gormDB)
	reviewUseCase := review.NewInteractor(reviewRepository)
	reviewHandler := handler.NewReviewHandler(reviewUseCase)
	sessionUseCase := session.NewInteractor(userRepository, bcryptPasswordHasher, userUseCase)
	sessionHandler := handler.NewSessionHandler(sessionUseCase)
	echoEcho := router.RegisterRoutes(httpConfig, gymHandler, userHandler, reviewHandler, sessionHandler)
	return echoEcho, func() {
	}, nil
}

// wire.go:

var RepositorySet = wire.NewSet(repository.NewUserRepository, wire.Bind(new(user.Repository), new(*repository.UserRepository)), wire.Bind(new(session.UserRepository), new(*repository.UserRepository)), repository.NewGymRepository, repository.NewReviewRepository, repository.NewTagRepository)

var internalPlatformSet = wire.NewSet(auth.NewBcryptPasswordHasher, wire.Bind(new(user.PasswordHasher), new(*auth.BcryptPasswordHasher)), wire.Bind(new(session.PasswordHasher), new(*auth.BcryptPasswordHasher)))

var UsecaseSet = wire.NewSet(
	internalPlatformSet, gym.NewInteractor, review.NewInteractor, session.NewInteractor, user.NewInteractor,
)

var HandlerSet = wire.NewSet(handler.NewGymHandler, handler.NewReviewHandler, handler.NewUserHandler, handler.NewSessionHandler)

var ServerSet = wire.NewSet(router.RegisterRoutes)

var InfraSet = wire.NewSet(db.NewDB)

func provideHTTP(c *configs.Config) configs.HTTPConfig { return c.HTTP }

func provideDB(c *configs.Config) configs.DatabaseConfig { return c.Database }
