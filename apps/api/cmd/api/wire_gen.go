// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"fmt"
	"github.com/go-playground/validator/v10"
	"github.com/labstack/echo/v4"
	"gogym-api/configs"
	"gogym-api/internal/adapter/auth"
	"gogym-api/internal/adapter/db/gorm"
	"gogym-api/internal/adapter/http/handler"
	"gogym-api/internal/adapter/http/router"
	"gogym-api/internal/adapter/service"
	"gogym-api/internal/di"
	"gogym-api/internal/infra/db"
	"gogym-api/internal/usecase/gym"
	"gogym-api/internal/usecase/review"
	"gogym-api/internal/usecase/session"
	"gogym-api/internal/usecase/user"
	gorm2 "gorm.io/gorm"
	"log/slog"
)

// Injectors from wire.go:

// InitServer は全ての依存関係を注入してServerを構築
//
// 依存フロー:
// Config (env)
//
//	├─ Logger(slog)
//	├─ DB (GORM MySQL) ──┐
//	├─ Redis              │
//	├─ S3(MinIO)          │
//	└─ Auth(JWT)          │
//	                      │
//	              Repositories (adapter/db/*) ← DB/Redis/S3に依存
//	                      │
//	                 Usecases (usecase/*) ← Repo + Auth + その他サービス
//	                      │
//	              Handlers (adapter/http/handler/*)
//	                      │
//	            Middlewares (adapter/http/middleware/*) ← Authなど
//	                      │
//	                Router (adapter/http/router.go)
//	                      │
//	                 Echo *Server
func InitServer(ctx context.Context, config *configs.Config, logger *slog.Logger) (*Server, error) {
	databaseConfig := di.ProvideDatabaseConfig(config)
	gormDB, err := db.NewGormDB(databaseConfig)
	if err != nil {
		return nil, err
	}
	repository := gorm.NewGymRepository(gormDB)
	tagRepository := gorm.NewTagRepository(gormDB)
	useCase := gym.NewUseCase(repository, tagRepository, logger)
	gymHandler := handler.NewGymHandler(useCase)
	userRepository := NewUserRepository(gormDB)
	passwordHasher, err := NewUserPasswordHasher()
	if err != nil {
		return nil, err
	}
	idProvider := NewUserIDProvider()
	userUseCase := user.NewInteractor(userRepository, passwordHasher, idProvider)
	userHandler := handler.NewUserHandler(userUseCase)
	reviewRepository := gorm.NewReviewRepository(gormDB)
	reviewUseCase := review.NewUseCase(reviewRepository)
	reviewHandler := handler.NewReviewHandler(reviewUseCase)
	favoriteHandler := handler.NewFavoriteHandler()
	jwt := NewJWTService(config)
	sessionUserRepository := NewSessionUserRepository(gormDB)
	sessionIDProvider := NewSessionIDProvider()
	timeProvider := service.NewTimeProvider()
	sessionPasswordHasher, err := NewBcryptPasswordHasher()
	if err != nil {
		return nil, err
	}
	sessionUseCase := session.NewInteractor(jwt, sessionUserRepository, sessionIDProvider, timeProvider, sessionPasswordHasher, userUseCase)
	sessionHandler := handler.NewSessionHandler(sessionUseCase)
	echo := NewConfiguredEcho(gymHandler, userHandler, reviewHandler, favoriteHandler, sessionHandler)
	server := &Server{
		Echo:   echo,
		Config: config,
		Logger: logger,
	}
	return server, nil
}

// wire.go:

// Server はEchoサーバーのラッパー構造体
// アプリケーション全体のライフサイクルを管理
type Server struct {
	Echo   *echo.Echo
	Config *configs.Config
	Logger *slog.Logger
}

// NewBasicEcho は基本的なEchoサーバーを作成
func NewBasicEcho() *echo.Echo {
	e := echo.New()

	e.Validator = &CustomValidator{validator: validator.New()}

	return e
}

// CustomValidator カスタムバリデーター
type CustomValidator struct {
	validator *validator.Validate
}

// Validate バリデーション実行
func (cv *CustomValidator) Validate(i interface{}) error {
	return cv.validator.Struct(i)
}

// NewConfiguredEcho はルーティング設定済みのEchoサーバーを作成
func NewConfiguredEcho(gymHandler *handler.GymHandler, userHandler *handler.UserHandler, reviewHandler *handler.ReviewHandler, favoriteHandler *handler.FavoriteHandler, sessionHandler *handler.SessionHandler) *echo.Echo {
	e := NewBasicEcho()
	router.NewRouter(e, gymHandler, userHandler, reviewHandler, favoriteHandler, sessionHandler)

	return e
}

// Start はサーバーを開始
func (s *Server) Start() error {
	addr := fmt.Sprintf(":%d", s.Config.Server.Port)
	s.Logger.Info("Starting server", "address", addr)
	return s.Echo.Start(addr)
}

// Shutdown はサーバーを graceful shutdown
func (s *Server) Shutdown(ctx context.Context) error {
	s.Logger.Info("Shutting down server")
	return s.Echo.Shutdown(ctx)
}

// NewJWTService はJWTサービスを作成
func NewJWTService(cfg *configs.Config) session.JWT {
	return auth.New(
		[]byte(cfg.Auth.JWTSecret),
		[]byte(cfg.Auth.JWTSecret),
		cfg.Auth.Issuer,
		cfg.Auth.AccessExpiresIn,
		cfg.Auth.RefreshExpiresIn,
	)
}

// NewBcryptPasswordHasher はBcryptパスワードハッシャーを作成
func NewBcryptPasswordHasher() (session.PasswordHasher, error) {
	hasher, err := auth.NewBcryptPasswordHasher(12, "")
	if err != nil {
		return nil, err
	}
	return hasher, nil
}

// NewUserPasswordHasher はユーザー用パスワードハッシャーを作成
func NewUserPasswordHasher() (user.PasswordHasher, error) {
	hasher, err := auth.NewBcryptPasswordHasher(12, "")
	if err != nil {
		return nil, err
	}
	return hasher, nil
}

// NewUserIDProvider はユーザー用IDプロバイダーを作成
func NewUserIDProvider() user.IDProvider {
	return service.NewIDProvider()
}

// NewSessionIDProvider はセッション用IDプロバイダーを作成
func NewSessionIDProvider() session.IDProvider {
	return service.NewIDProvider()
}

// NewUserRepository はユーザー用ユーザーリポジトリを作成
func NewUserRepository(db2 *gorm2.DB) user.Repository {
	return gorm.NewUserRepository(db2)
}

// NewSessionUserRepository はセッション用ユーザーリポジトリを作成
func NewSessionUserRepository(db2 *gorm2.DB) session.UserRepository {
	repo := gorm.NewUserRepository(db2)
	return repo.(session.UserRepository)
}
