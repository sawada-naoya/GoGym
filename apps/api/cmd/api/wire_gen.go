// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"fmt"
	"github.com/labstack/echo/v4"
	"gogym-api/configs"
	"log/slog"
)

// Injectors from wire.go:

// InitServer は全ての依存関係を注入してServerを構築
//
// 依存フロー:
// Config (env)
//
//	├─ Logger(slog)
//	├─ DB (GORM MySQL) ──┐
//	├─ Redis              │
//	├─ S3(MinIO)          │
//	└─ Auth(JWT)          │
//	                      │
//	              Repositories (adapter/db/*) ← DB/Redis/S3に依存
//	                      │
//	                 Usecases (usecase/*) ← Repo + Auth + その他サービス
//	                      │
//	              Handlers (adapter/http/handler/*)
//	                      │
//	            Middlewares (adapter/http/middleware/*) ← Authなど
//	                      │
//	                Router (adapter/http/router.go)
//	                      │
//	                 Echo *Server
func InitServer(ctx context.Context, config *configs.Config, logger *slog.Logger) (*Server, error) {
	echo := NewBasicEcho()
	server := &Server{
		Echo:   echo,
		Config: config,
		Logger: logger,
	}
	return server, nil
}

// wire.go:

// Server はEchoサーバーのラッパー構造体
// アプリケーション全体のライフサイクルを管理
type Server struct {
	Echo   *echo.Echo
	Config *configs.Config
	Logger *slog.Logger
}

// NewBasicEcho は基本的なEchoサーバーを作成
func NewBasicEcho() *echo.Echo {
	e := echo.New()

	return e
}

// Start はサーバーを開始
func (s *Server) Start() error {
	addr := fmt.Sprintf(":%d", s.Config.Server.Port)
	s.Logger.Info("Starting server", "address", addr)
	return s.Echo.Start(addr)
}

// Shutdown はサーバーを graceful shutdown
func (s *Server) Shutdown(ctx context.Context) error {
	s.Logger.Info("Shutting down server")
	return s.Echo.Shutdown(ctx)
}
