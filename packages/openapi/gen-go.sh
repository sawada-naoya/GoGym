#!/bin/bash
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${YELLOW}🚀 Generating Go server code from OpenAPI spec...${NC}"

# Check if oapi-codegen is installed
if ! command -v oapi-codegen &> /dev/null; then
    echo -e "${RED}❌ oapi-codegen is not installed${NC}"
    echo "Install it with: go install github.com/deepmap/oapi-codegen/v2/cmd/oapi-codegen@latest"
    exit 1
fi

# Create output directory
OUTPUT_DIR="../../apps/api/internal/gen"
mkdir -p "$OUTPUT_DIR"

# Generate types
echo -e "${YELLOW}📋 Generating types...${NC}"
oapi-codegen -generate types -package gen -o "$OUTPUT_DIR/types.go" openapi.yaml

# Generate server
echo -e "${YELLOW}🏗️  Generating server...${NC}"
oapi-codegen -generate echo-server -package gen -o "$OUTPUT_DIR/server.go" openapi.yaml

# Generate client (for testing)
echo -e "${YELLOW}🔌 Generating client...${NC}"
oapi-codegen -generate client -package gen -o "$OUTPUT_DIR/client.go" openapi.yaml

# Generate spec
echo -e "${YELLOW}📄 Generating spec...${NC}"
oapi-codegen -generate spec -package gen -o "$OUTPUT_DIR/spec.go" openapi.yaml

# Add build constraint and package comment to generated files
for file in "$OUTPUT_DIR"/*.go; do
    if [[ -f "$file" ]]; then
        # Create temporary file with header
        cat > "${file}.tmp" << 'EOF'
// Code generated by oapi-codegen. DO NOT EDIT.

//go:build !ignore_autogenerated

EOF
        # Append original content
        cat "$file" >> "${file}.tmp"
        mv "${file}.tmp" "$file"
    fi
done

echo -e "${GREEN}✅ Go server code generation completed!${NC}"
echo -e "${GREEN}📁 Generated files in: $OUTPUT_DIR${NC}"
echo ""
echo "Generated files:"
ls -la "$OUTPUT_DIR"